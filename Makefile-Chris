CC = gcc
YACC = yacc
LEX = flex
CFLAGS = -O3 -std=c11
LFLAGS = -l
YFLAGS = -dv
TEST_OBJECTS = vector_int.o vector_type.o type.o type_utils.o hashtable.o stackedtable.o tree.o syntax.o test.o
DRAGON_OBJECTS = lex.yy.o y.tab.o vector_int.o vector_type.o type.o type_utils.o hashtable.o stackedtable.o tree.o syntax.o 
LDFLAGS ="-L/usr/local/opt/flex/lib"
LDLIBS = -lfl

.PHONY: clean semantic

dragon: $(DRAGON_OBJECTS)
	$(CC) $(CFLAGS) -o $@ $^ $(LDFLAGS) $(LDLIBS)

semantic: dragon
	./semantic.sh

test: $(TEST_OBJECTS)
	$(CC) $(CFLAGS) -o $@ $^

y.tab.h y.tab.c: flags.h pc.y vector_int.h
	$(YACC) $(YFLAGS) pc.y

lex.yy.c: flags.h y.tab.h pc.l
	$(LEX) $(LFLAGS) pc.l

syntax.o: flags.h y.tab.h vector_int.h syntax.c
	$(CC) $(CFLAGS) -c syntax.c

type_utils.o: y.tab.h vector_int.h type_utils.c
	$(CC) $(CFLAGS) -c type_utils.c

vector_int.c vector_int.h: vector_template.c vector_template.h
	sed 's/NAME/int/g' vector_template.h > temp
	sed 's/TYPE/int/g' temp > vector_int.h
	sed 's/NAME/int/g' vector_template.c > temp
	sed 's/TYPE/int/g' temp > vector_int.c
	rm temp

%.o: %.c
	$(CC) $(CFLAGS) -c $<

clean:
	rm dragon test lex.yy.c y.* *.o vector_int.*