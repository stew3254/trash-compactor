Nonterminals useless in grammar

    identifier_list
    declarations
    type
    standard_type
    subprogram_declarations
    subprogram_declaration
    subprogram_head
    arguments
    parameter_list
    compound_statement
    optional_statements
    statement_list
    statement
    variable
    procedure_statement


Terminals unused in grammar

    LT
    LE
    GT
    GE
    NE
    EQ
    PLUS
    MINUS
    OR
    STAR
    SLASH
    AND
    ASSIGNOP
    IF
    THEN
    ELSE
    WHILE
    DO
    VAR
    ARRAY
    OF
    INTEGER
    REAL
    FUNCTION
    PROCEDURE
    DOTDOT
    ','
    ':'


Rules useless in grammar

   18 identifier_list: ID
   19                | identifier_list ',' ID

   20 declarations: declarations VAR identifier_list ':' type ';'
   21             | %empty

   22 type: standard_type
   23     | ARRAY '[' INUM DOTDOT INUM ']' OF standard_type

   24 standard_type: INTEGER
   25              | REAL

   26 subprogram_declarations: subprogram_declarations subprogram_declaration ';'
   27                        | %empty

   28 subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement

   29 subprogram_head: FUNCTION ID arguments ':' standard_type ';'
   30                | PROCEDURE ID arguments ';'

   31 arguments: '(' parameter_list ')'
   32          | %empty

   33 parameter_list: identifier_list ':' type
   34               | parameter_list ';' identifier_list ':' type

   35 compound_statement: BBEGIN optional_statements END

   36 optional_statements: statement_list
   37                    | %empty

   38 statement_list: statement
   39               | statement_list ';' statement

   40 statement: variable ASSIGNOP expression
   41          | procedure_statement
   42          | compound_statement
   43          | IF expression THEN statement ELSE statement
   44          | IF expression THEN statement
   45          | WHILE expression DO statement

   46 variable: ID
   47         | ID '[' expression ']'

   48 procedure_statement: ID
   49                    | ID '(' expression_list ')'


State 11 conflicts: 1 shift/reduce
State 17 conflicts: 1 shift/reduce
State 34 conflicts: 1 shift/reduce


Grammar

    0 $accept: start $end

    1 start: PROGRAM ID '(' ')' ';' BBEGIN expression_list END '.'

    2 expression_list: expression expression_list
    3                | %empty

    4 expression: simple_expression
    5           | simple_expression RELOP simple_expression

    6 simple_expression: term
    7                  | ADDOP term
    8                  | simple_expression ADDOP term

    9 term: factor
   10     | term MULOP factor

   11 factor: ID
   12       | ID '(' expression_list ')'
   13       | ID '[' expression ']'
   14       | INUM
   15       | RNUM
   16       | '(' expression ')'
   17       | NOT factor


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 1 12 16
    ')' (41) 1 12 16
    ',' (44)
    '.' (46) 1
    ':' (58)
    ';' (59) 1
    '[' (91) 13
    ']' (93) 13
    error (256)
    INUM <ival> (258) 14
    RNUM <rval> (259) 15
    ID <sval> (260) 1 11 12 13
    RELOP <OPVAL> (261) 5
    LT (262)
    LE (263)
    GT (264)
    GE (265)
    NE (266)
    EQ (267)
    ADDOP <opval> (268) 7 8
    PLUS (269)
    MINUS (270)
    OR (271)
    MULOP <opval> (272) 10
    STAR (273)
    SLASH (274)
    AND (275)
    NOT (276) 17
    ASSIGNOP (277)
    PROGRAM (278) 1
    BBEGIN (279) 1
    END (280) 1
    IF (281)
    THEN (282)
    ELSE (283)
    WHILE (284)
    DO (285)
    VAR (286)
    ARRAY (287)
    OF (288)
    INTEGER (289)
    REAL (290)
    FUNCTION (291)
    PROCEDURE (292)
    DOTDOT (293)


Nonterminals, with rules where they appear

    $accept (47)
        on left: 0
    start (48)
        on left: 1
        on right: 0
    expression_list (49)
        on left: 2 3
        on right: 1 2 12
    expression (50)
        on left: 4 5
        on right: 2 13 16
    simple_expression (51)
        on left: 6 7 8
        on right: 4 5 8
    term (52)
        on left: 9 10
        on right: 6 7 8 10
    factor (53)
        on left: 11 12 13 14 15 16 17
        on right: 9 10 17


State 0

    0 $accept: • start $end

    PROGRAM  shift, and go to state 1

    start  go to state 2


State 1

    1 start: PROGRAM • ID '(' ')' ';' BBEGIN expression_list END '.'

    ID  shift, and go to state 3


State 2

    0 $accept: start • $end

    $end  shift, and go to state 4


State 3

    1 start: PROGRAM ID • '(' ')' ';' BBEGIN expression_list END '.'

    '('  shift, and go to state 5


State 4

    0 $accept: start $end •

    $default  accept


State 5

    1 start: PROGRAM ID '(' • ')' ';' BBEGIN expression_list END '.'

    ')'  shift, and go to state 6


State 6

    1 start: PROGRAM ID '(' ')' • ';' BBEGIN expression_list END '.'

    ';'  shift, and go to state 7


State 7

    1 start: PROGRAM ID '(' ')' ';' • BBEGIN expression_list END '.'

    BBEGIN  shift, and go to state 8


State 8

    1 start: PROGRAM ID '(' ')' ';' BBEGIN • expression_list END '.'

    INUM   shift, and go to state 9
    RNUM   shift, and go to state 10
    ID     shift, and go to state 11
    ADDOP  shift, and go to state 12
    NOT    shift, and go to state 13
    '('    shift, and go to state 14

    $default  reduce using rule 3 (expression_list)

    expression_list    go to state 15
    expression         go to state 16
    simple_expression  go to state 17
    term               go to state 18
    factor             go to state 19


State 9

   14 factor: INUM •

    $default  reduce using rule 14 (factor)


State 10

   15 factor: RNUM •

    $default  reduce using rule 15 (factor)


State 11

   11 factor: ID •
   12       | ID • '(' expression_list ')'
   13       | ID • '[' expression ']'

    '('  shift, and go to state 20
    '['  shift, and go to state 21

    '('       [reduce using rule 11 (factor)]
    $default  reduce using rule 11 (factor)


State 12

    7 simple_expression: ADDOP • term

    INUM  shift, and go to state 9
    RNUM  shift, and go to state 10
    ID    shift, and go to state 11
    NOT   shift, and go to state 13
    '('   shift, and go to state 14

    term    go to state 22
    factor  go to state 19


State 13

   17 factor: NOT • factor

    INUM  shift, and go to state 9
    RNUM  shift, and go to state 10
    ID    shift, and go to state 11
    NOT   shift, and go to state 13
    '('   shift, and go to state 14

    factor  go to state 23


State 14

   16 factor: '(' • expression ')'

    INUM   shift, and go to state 9
    RNUM   shift, and go to state 10
    ID     shift, and go to state 11
    ADDOP  shift, and go to state 12
    NOT    shift, and go to state 13
    '('    shift, and go to state 14

    expression         go to state 24
    simple_expression  go to state 17
    term               go to state 18
    factor             go to state 19


State 15

    1 start: PROGRAM ID '(' ')' ';' BBEGIN expression_list • END '.'

    END  shift, and go to state 25


State 16

    2 expression_list: expression • expression_list

    INUM   shift, and go to state 9
    RNUM   shift, and go to state 10
    ID     shift, and go to state 11
    ADDOP  shift, and go to state 12
    NOT    shift, and go to state 13
    '('    shift, and go to state 14

    $default  reduce using rule 3 (expression_list)

    expression_list    go to state 26
    expression         go to state 16
    simple_expression  go to state 17
    term               go to state 18
    factor             go to state 19


State 17

    4 expression: simple_expression •
    5           | simple_expression • RELOP simple_expression
    8 simple_expression: simple_expression • ADDOP term

    RELOP  shift, and go to state 27
    ADDOP  shift, and go to state 28

    ADDOP     [reduce using rule 4 (expression)]
    $default  reduce using rule 4 (expression)


State 18

    6 simple_expression: term •
   10 term: term • MULOP factor

    MULOP  shift, and go to state 29

    $default  reduce using rule 6 (simple_expression)


State 19

    9 term: factor •

    $default  reduce using rule 9 (term)


State 20

   12 factor: ID '(' • expression_list ')'

    INUM   shift, and go to state 9
    RNUM   shift, and go to state 10
    ID     shift, and go to state 11
    ADDOP  shift, and go to state 12
    NOT    shift, and go to state 13
    '('    shift, and go to state 14

    $default  reduce using rule 3 (expression_list)

    expression_list    go to state 30
    expression         go to state 16
    simple_expression  go to state 17
    term               go to state 18
    factor             go to state 19


State 21

   13 factor: ID '[' • expression ']'

    INUM   shift, and go to state 9
    RNUM   shift, and go to state 10
    ID     shift, and go to state 11
    ADDOP  shift, and go to state 12
    NOT    shift, and go to state 13
    '('    shift, and go to state 14

    expression         go to state 31
    simple_expression  go to state 17
    term               go to state 18
    factor             go to state 19


State 22

    7 simple_expression: ADDOP term •
   10 term: term • MULOP factor

    MULOP  shift, and go to state 29

    $default  reduce using rule 7 (simple_expression)


State 23

   17 factor: NOT factor •

    $default  reduce using rule 17 (factor)


State 24

   16 factor: '(' expression • ')'

    ')'  shift, and go to state 32


State 25

    1 start: PROGRAM ID '(' ')' ';' BBEGIN expression_list END • '.'

    '.'  shift, and go to state 33


State 26

    2 expression_list: expression expression_list •

    $default  reduce using rule 2 (expression_list)


State 27

    5 expression: simple_expression RELOP • simple_expression

    INUM   shift, and go to state 9
    RNUM   shift, and go to state 10
    ID     shift, and go to state 11
    ADDOP  shift, and go to state 12
    NOT    shift, and go to state 13
    '('    shift, and go to state 14

    simple_expression  go to state 34
    term               go to state 18
    factor             go to state 19


State 28

    8 simple_expression: simple_expression ADDOP • term

    INUM  shift, and go to state 9
    RNUM  shift, and go to state 10
    ID    shift, and go to state 11
    NOT   shift, and go to state 13
    '('   shift, and go to state 14

    term    go to state 35
    factor  go to state 19


State 29

   10 term: term MULOP • factor

    INUM  shift, and go to state 9
    RNUM  shift, and go to state 10
    ID    shift, and go to state 11
    NOT   shift, and go to state 13
    '('   shift, and go to state 14

    factor  go to state 36


State 30

   12 factor: ID '(' expression_list • ')'

    ')'  shift, and go to state 37


State 31

   13 factor: ID '[' expression • ']'

    ']'  shift, and go to state 38


State 32

   16 factor: '(' expression ')' •

    $default  reduce using rule 16 (factor)


State 33

    1 start: PROGRAM ID '(' ')' ';' BBEGIN expression_list END '.' •

    $default  reduce using rule 1 (start)


State 34

    5 expression: simple_expression RELOP simple_expression •
    8 simple_expression: simple_expression • ADDOP term

    ADDOP  shift, and go to state 28

    ADDOP     [reduce using rule 5 (expression)]
    $default  reduce using rule 5 (expression)


State 35

    8 simple_expression: simple_expression ADDOP term •
   10 term: term • MULOP factor

    MULOP  shift, and go to state 29

    $default  reduce using rule 8 (simple_expression)


State 36

   10 term: term MULOP factor •

    $default  reduce using rule 10 (term)


State 37

   12 factor: ID '(' expression_list ')' •

    $default  reduce using rule 12 (factor)


State 38

   13 factor: ID '[' expression ']' •

    $default  reduce using rule 13 (factor)
